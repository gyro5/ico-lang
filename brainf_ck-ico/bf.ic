// A table to store the state of the interpreter
$ vm = [#];
vm.stack = [];
vm.stackTop = -1; // Points to the top slot, inclusive
vm.asciiTable = [];

$ populateAscii1 = /\ -> {
    $ t = vm.asciiTable;
    t[0] = "";
    t[1] = "";
    t[2] = "";
    t[3] = "";
    t[4] = "";
    t[5] = "";
    t[6] = "";
    t[7] = "";
    t[8] = "";
    t[9] = "";
    t[10] = "";
    t[11] = "";
    t[12] = "";
    t[13] = "";
    t[14] = "";
    t[15] = "";
    t[16] = "";
    t[17] = "";
    t[18] = "";
    t[19] = "";
    t[20] = "";
    t[21] = "";
    t[22] = "";
    t[23] = "";
    t[24] = "";
    t[25] = "";
    t[26] = "";
    t[27] = "";
    t[28] = "";
    t[29] = "";
    t[30] = "";
    t[31] = "";
    t[32] = " ";
    t[33] = "!";
    t[34] = ""; // Ico doesn't support " in a string
    t[35] = "#";
    t[36] = "$";
    t[37] = "%";
    t[38] = "&";
    t[39] = "'";
    t[40] = "(";
    t[41] = ")";
    t[42] = "*";
    t[43] = "+";
    t[44] = ",";
    t[45] = "-";
    t[46] = ".";
    t[47] = "/";
    t[48] = "0";
    t[49] = "1";
    t[50] = "2";
    t[51] = "3";
    t[52] = "4";
    t[53] = "5";
    t[54] = "6";
    t[55] = "7";
    t[56] = "8";
    t[57] = "9";
    t[58] = ":";
    t[59] = ";";
    t[60] = "<";
    t[61] = "=";
    t[62] = ">";
    t[63] = "?";
    t[64] = "@";
    t[65] = "A";
    t[66] = "B";
    t[67] = "C";
    t[68] = "D";
    t[69] = "E";
    t[70] = "F";
    t[71] = "G";
    t[72] = "H";
    t[73] = "I";
    t[74] = "J";
    t[75] = "K";
    t[76] = "L";
    t[77] = "M";
    t[78] = "N";
    t[79] = "O";
    t[80] = "P";
    t[81] = "Q";
    t[82] = "R";
    t[83] = "S";
    t[84] = "T";
    t[85] = "U";
    t[86] = "V";
    t[87] = "W";
    t[88] = "X";
    t[89] = "Y";
    t[90] = "Z";
    t[91] = "[";
    t[92] = "\";
    t[93] = "]";
    t[94] = "^";
    t[95] = "_";
    t[96] = "`";
    t[97] = "a";
    t[98] = "b";
    t[99] = "c";
};

$ populateAscii2 = /\ -> {
    $ t = vm.asciiTable;
    t[100] = "d";
    t[101] = "e";
    t[102] = "f";
    t[103] = "g";
    t[104] = "h";
    t[105] = "i";
    t[106] = "j";
    t[107] = "k";
    t[108] = "l";
    t[109] = "m";
    t[110] = "n";
    t[111] = "o";
    t[112] = "p";
    t[113] = "q";
    t[114] = "r";
    t[115] = "s";
    t[116] = "t";
    t[117] = "u";
    t[118] = "v";
    t[119] = "w";
    t[120] = "x";
    t[121] = "y";
    t[122] = "z";
    t[123] = "{";
    t[124] = "|";
    t[125] = "}";
    t[126] = "~";
};

$ push = /\ v ->
    vm.stack[vm.stackTop = vm.stackTop + 1] = v;

$ pop = /\ -> vm.stackTop = vm.stackTop - 1;

$ peek = /\ -> vm.stack[vm.stackTop];

$ findAsciiCode = /\ c -> {
    $ l = len(vm.asciiTable);
    $ i = 0;
    @ i < l : {
        \ c == vm.asciiTable[i] ? {
            <~ i;
        }
        i = i + 1;
    }
    >> "Unavailable ASCII char: "; >>> c;
    <~ #;
};

$ buf = #;
$ getchar = /\ -> {
    \ buf == # | len(buf) == 0 ? {
        buf = <<;
    }
    $ c = buf[0];
    len(buf) == 1 ? (buf = #) : (buf = buf[1 -> -1]);
    <~ findAsciiCode(c);
};

$ interpret = /\ str -> {
    // Initialize the array of 30000 slots
    $ arr = [];
    $ i = -1;
    @ i < 30000 : arr[i = i + 1] = 0;

    // Interpret the source code string
    $ l = len(str);
    $ cur = 0; // Cursor of the array
    i = 0;
    @ i < l : {
        $ c = str[i];

        \ c == ">" ? { // Move the cursor right
            cur = (cur + 1) % 30000;
        }
        :\ c == "<" ? { // Move the cursor left
            cur = cur - 1;
            cur = cur < 0 ? cur + 30000 : cur;
        }
        :\ c == "+" ? { // Increment one
            arr[cur] = arr[cur] + 1;
        }
        :\ c == "-" ? { // Decrement one
            arr[cur] = arr[cur] - 1;
        }
        :\ c == "[" ? { // Start loop
            push(i);
        }
        :\ c == "]" ? { // If not zero, loop
            \ arr[cur] == 0 ? { // Zero -> Stop loop
                pop();
            }
            : { // Not zero --> Loop
                i = peek();
            }
        }
        :\ c == "," ? {
            arr[cur] = getchar();
        }
        :\ c == "." ? {
            // >> arr[cur]; >> " ";
            >> vm.asciiTable[arr[cur]];
        }
        // All other characters are comments

        // For debugging
        // >> c; >> " : ";
        // >>> arr[0 -> 10];

        i = i + 1;
    }
};

$ repl = /\ -> {
    @ :) : {
        >> "bf> ";
        $ code = <<;
        interpret(code);
        >>> "";
    }
};

populateAscii1();
populateAscii2();
repl();